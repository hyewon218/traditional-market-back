plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.market'
version = '0.0.1'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    implementation 'mysql:mysql-connector-java:8.0.33'  // MySQL JDBC driver
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-security:3.2.4'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.5'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.springframework.boot:spring-boot-starter-mail' // 회원가입 시 이메일 인증 기능
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'// AWS
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5' // JWT
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
    implementation 'javax.xml.bind:jaxb-api:2.3.1' // XML 문서와 Java 객체 간 매핑 자동화
    testImplementation 'org.projectlombok:lombok' // 테스트를 위한 세팅
    testAnnotationProcessor 'org.projectlombok:lombok' // 테스트를 위한 세팅
    implementation 'com.google.code.gson:gson:2.10.1' // 객체를 JSON 문자열로 처리
    implementation 'org.springframework.boot:spring-boot-starter-data-redis:3.2.5' // redis
    implementation 'org.modelmapper:modelmapper:3.2.0' // redis
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client:3.3.0' // oauth2.0
    //implementation 'org.springframework:spring-webmvc:6.0.9' // SSE
    implementation('com.vladmihalcea:hibernate-types-60:2.21.1') // @Type
    implementation 'org.springframework.boot:spring-boot-starter-websocket:3.2.2' // websocket
    // QueryDSL 적용을 위한 의존성 (SpringBoot3.0 부터는 jakarta 사용해야함)
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'org.springframework.boot:spring-boot-starter-batch' // 스프링 배치
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
}

tasks.named('test') {
    useJUnitPlatform()
}

/**
 * QueryDSL Build Options
 */
def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

// 에러 해결
tasks.withType(JavaCompile) {
    options.compilerArgs -= ["--enable-preview"]
}

tasks.withType(Test) {
    jvmArgs -= ["--enable-preview"]
}

bootJar{
    archivesBaseName = 'tmarket'
    archiveFileName = "tmarket-${version}.jar"
}


jar {
    enabled = false
}