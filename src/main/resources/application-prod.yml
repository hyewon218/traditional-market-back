server:
  port: 8080

spring:
  application:
    name: traditional-market

  #Spring Batch
  batch:
    job:
      name: ${job.name:NONE} # 파라미터로 받은 job.name 을 job.name 에 넣어준다.
      enabled: false # 프로그램 인수가 있더라도 실행이 되지 않는다.
    jdbc:
      initialize-schema: always

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://mysql:3306/${DB_NAME} # 컨테이너 내부 포트는 3306
    username: ${DB_ID}
    password: ${DB_PW}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 20
      connection-timeout: 30000
      idle-timeout: 600000

  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.MySQL8Dialect

  data:
    redis:
      host: redis
      port: 6379
      lettuce:
        pool:
          max-active: 128
          max-idle: 64
          min-idle: 32
          max-wait: 1000ms


  thymeleaf:
    cache: false
    check-template-location: true
    enabled: true

  mvc:
    hiddenmethod:
      filter:
        enabled: true

  mail:
    # google smtp server 사용
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_ISSUER}
    password: ${EMAIL_PW}
    properties: # 이메일 구성에 대한 추가 속성
      mail:
        smtp:
          auth: true # SMTP 서버에 인증 필요한 경우 true로 지정한다. Gmail SMTP 서버는 인증을 요구하기 때문에 true로 설정해야 한다.
          connectiontimeout: 5000 # 클라이언트가 SMTP 서버와의 연결을 설정하는 데 대기해야 하는 시간(Millisecond). 연결이 불안정한 경우 대기 시간이 길어질 수 있기 때문에 너무 크게 설정하면 전송 속도가 느려질 수 있다.
          timeout: 5000 # 클라이언트가 SMTP 서버로부터 응답을 대기해야 하는 시간(Millisecond). 서버에서 응답이 오지 않는 경우 대기 시간을 제한하기 위해 사용된다.
          writetimeout: 5000 # 클라이언트가 작업을 완료하는데 대기해야 하는 시간(Millisecond). 이메일을 SMTP 서버로 전송하는 데 걸리는 시간을 제한하는데 사용된다.
          starttls: # SMTP 서버가 TLS를 사용하여 안전한 연결을 요구하는 경우 true로 설정한다. TLS는 데이터를 암호화하여 안전한 전송을 보장하는 프로토콜이다.
            enable: true
            required: true
          ssl:
            trust: smtp.gmail.com
            protocols: TLSv1.2

  #    auth-code-expiration-millis: 180000 # 3*60*1000 = 3분   # redis에 저장해서 필요없음

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_ID}
            client-secret: ${GOOGLE_PW}
            #redirect-uri: "http://3.36.96.0:8080/login/oauth2/code/google"
            redirect-uri: "https://tmarket.store/api/login/oauth2/code/google"
            authorization-grant-type: authorization_code
            scope: email, profile
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://accounts.google.com/o/oauth2/token

          naver:
            client-id: ${NAVER_ID}
            client-secret: ${NAVER_PW}
            #redirect-uri: "http://3.36.96.0:8080/login/oauth2/code/naver" # callback uri
            redirect-uri: "https://tmarket.store/api/login/oauth2/code/naver" # callback uri
            authorization-grant-type: authorization_code
            scope: email, nickname
            client-name: Naver

          kakao:
            client-id: ${KAKAO_ID}
            client-secret: ${KAKAO_PW}
            #redirect-uri: "http://3.36.96.0:8080/login/oauth2/code/kakao" # callback uri
            redirect-uri: "https://tmarket.store/api/login/oauth2/code/kakao" # callback uri
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            scope: profile_nickname, account_email, profile_image #동의 항목
            client-name: Kakao

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 유저 정보 조회 시 반환되는 최상위 필드명으로 해야 한다.

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  kafka:
    bootstrap-servers: 43.203.173.204:9092,3.36.131.169:9092,3.39.0.214:9092
    consumer:
      group-id: notification
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.LongDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        max.poll.interval.ms: 300000  #5분으로 설정
        heartbeat.interval.ms: 3000   #하트비트 간격 조정
        session.timeout.ms: 10000     #세션 타임아웃 설정
        spring:
          json:
            trusted.packages: "com.market.domain.notification.entity"
    producer:
      key-serializer: org.apache.kafka.common.serialization.LongSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 3
      acks: all
    listener:
      ack-mode: MANUAL
    topic:
      notification: r2rj2fh0-notification
      min:
        insync:
          replicas: 2
      partitions: 3
      replication-factor: 3

cloud:
  aws:
    credentials:
      access-key: ${ACCESS_KEY}
      secret-key: ${SECRET_KEY}
    region:
      static: ${STATIC}
    s3:
      bucket: ${BUCKET}

jwt:
  issuer: ${JWT_ISSUER}
  a_secret_key: ${A_KEY}
  r_secret_key: ${R_KEY}

kakaopay:
  secret_key: ${KAKAOPAY_SECRET_KEY_DEV}
  cid: TC0ONETIME


logging:
  level:
    org.springframework.cache: trace # Redis 사용에 대한 로그가 조회되도록 설정

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, prometheus

#---
#spring:
#  config:
#    activate:
#      on-profile: profile-one
#server:
#  port: 8083
